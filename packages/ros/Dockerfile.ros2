#
# Dockerfile for building ROS2 from source
#
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

ARG ROS_PACKAGE=ros_base \
    ROS_VERSION=humble

ENV ROS_DISTRO=${ROS_VERSION} \
    ROS_ROOT=/opt/ros/${ROS_VERSION} \
    ROS_PYTHON_VERSION=3 \
    RMW_IMPLEMENTATION=rmw_fastrtps_cpp \
    DEBIAN_FRONTEND=noninteractive \
    SHELL=/bin/bash
    
SHELL ["/bin/bash", "-c"] 

# set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    
# Build ROS2

# COPY ros2_build.sh /tmp/ros2_build.sh
# RUN /tmp/ros2_build.sh

# Print the ROS2 configuration
RUN echo "ROS2 builder => ROS_DISTRO=$ROS_DISTRO ROS_PACKAGE=$ROS_PACKAGE ROS_ROOT=$ROS_ROOT"

# Add the ROS2 repository to apt sources and install the GPG key
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update

# Update and install required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
        curl \
        wget \
        gnupg2 \
        lsb-release \
        ca-certificates \
        build-essential \
        cmake \
        git \
        libbullet-dev \
        libpython3-dev \
        python3-colcon-common-extensions \
        python3-flake8 \
        python3-pip \
        python3-numpy \
        python3-pytest-cov \
        python3-rosdep \
        python3-setuptools \
        python3-vcstool \
        python3-rosinstall-generator \
        libasio-dev \
        libtinyxml2-dev \
        libcunit1-dev

# Install pip packages for testing and CMake upgrade
RUN pip3 install --upgrade --no-cache-dir pip && \
    pip3 install --no-cache-dir \
        argcomplete \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        pytest-repeat \
        pytest-rerunfailures \
        pytest \
        scikit-build \
        cmake && \
    cmake --version && which cmake

# Remove Python 3.9 if present
RUN apt purge -y python3.9 libpython3.9* || echo "python3.9 not found, skipping removal"

# Create the ROS root directory and set working directory
RUN mkdir -p ${ROS_ROOT}/src
WORKDIR ${ROS_ROOT}

# Download ROS sources
RUN rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PACKAGE} \
        launch_xml \
        launch_yaml \
        launch_testing \
        launch_testing_ament_cmake \
        demo_nodes_cpp \
        demo_nodes_py \
        example_interfaces \
        camera_calibration_parsers \
        camera_info_manager \
        cv_bridge \
        v4l2_camera \
        vision_opencv \
        vision_msgs \
        image_geometry \
        image_pipeline \
        image_transport \
        compressed_image_transport \
        compressed_depth_image_transport \
        rosbag2_storage_mcap \
        rmw_fastrtps \
        > ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall && \
    cat ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall && \
    vcs import src < ros2.${ROS_DISTRO}.${ROS_PACKAGE}.rosinstall

# Patch and install ament_cmake if necessary
RUN rm -r ${ROS_ROOT}/src/ament_cmake && \
    git -C ${ROS_ROOT}/src/ clone https://github.com/ament/ament_cmake -b ${ROS_DISTRO}

# Install dependencies with rosdep
RUN rosdep init && \
    rosdep update && \
    rosdep install -y -r \
        --ignore-src \
        --from-paths src \
        --rosdistro ${ROS_DISTRO} \
        --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv"

# Patch CMakeLists.txt as per specific needs
RUN sed -i '89,99 s/^/#/' ${ROS_ROOT}/src/image_pipeline/image_proc/CMakeLists.txt

# Build using colcon
RUN colcon build \
        --merge-install \
        --cmake-args -DCMAKE_BUILD_TYPE=Release \
        --continue-on-error; exit 0

# Cleanup
# RUN rm -rf ${ROS_ROOT}/src && \
#     rm -rf ${ROS_ROOT}/logs && \
#     rm -rf ${ROS_ROOT}/build && \
#     rm ${ROS_ROOT}/*.rosinstall && \
#     rm -rf /var/lib/apt/lists/* && \
#     apt-get clean


# Set the default DDS middleware to cyclonedds
# https://github.com/ros2/rclcpp/issues/1335
# https://docs.ros.org/en/jazzy/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.html
#ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# commands will be appended/run by the entrypoint which sources the ROS environment
COPY ros_entrypoint.sh ros2_install.sh /

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["/bin/bash"]

